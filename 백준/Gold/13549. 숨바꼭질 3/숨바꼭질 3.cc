#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

// üî• ÌïµÏã¨ Ìè¨Ïù∏Ìä∏
// 	‚Ä¢	Í∞ÄÏ§ëÏπòÍ∞Ä Îã§Î•∏ Í≤ΩÎ°úÍ∞Ä Ï°¥Ïû¨Ìï® ‚Üí ÏùºÎ∞òÏ†ÅÏù∏ BFS (ÌÅê ÏÇ¨Ïö©)ÏúºÎ°úÎäî ÏµúÎã® Í≤ΩÎ°úÍ∞Ä Î≥¥Ïû•ÎêòÏßÄ ÏïäÏùå.
// 	‚Ä¢	Í∑∏ÎûòÏÑú Ïö∞ÏÑ†ÏàúÏúÑ ÌÅê(Dijkstra) ÌòπÏùÄ 0-1 BFS (deque) Î•º ÏÇ¨Ïö©Ìï¥Ïïº Ìï®!

// üí° 0-1 BFSÎûÄ?
// 	‚Ä¢	Í∞ÄÏ§ëÏπòÍ∞Ä 0Ïù∏ Í∞ÑÏÑ†ÏùÄ Îç±Ïùò ÏïûÏóê, Í∞ÄÏ§ëÏπòÍ∞Ä 1Ïù∏ Í∞ÑÏÑ†ÏùÄ Îç±Ïùò Îí§Ïóê ÎÑ£Îäî Î∞©ÏãùÏùò BFS.

bool isValid(int n)	{
	return (n >= 0) && (n <= 100000);
}

int main() {
	
	ios::sync_with_stdio(false);
	cin.tie(0);

	int N, K;	// 0 ‚â§ N ‚â§ 100,000, 0 ‚â§ K ‚â§ 100,000
	cin >> N >> K;

	vector<int> dp(100001, -1);
	dp[N] = 0;

	deque<int> dq;
	dq.push_back(N);

	while(!dq.empty())
	{
		int c = dq.front();
		dq.pop_front();

		if(c == K)	break;

		// ÏàúÍ∞ÑÏù¥Îèô: 0Ï¥à
		if (isValid(c * 2) && dp[c * 2] == -1) {
			dp[c * 2] = dp[c];
			dq.push_front(c * 2);
		}

		// Í±∑Í∏∞: 1Ï¥à
		if (isValid(c - 1) && dp[c - 1] == -1) {
			dp[c - 1] = dp[c] + 1;
			dq.push_back(c - 1);
		}
		if (isValid(c + 1) && dp[c + 1] == -1) {
			dp[c + 1] = dp[c] + 1;
			dq.push_back(c + 1);
		}

	}

	cout << dp[K] << '\n';
	return 0;
}